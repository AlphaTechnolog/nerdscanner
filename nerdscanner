#!/usr/bin/env python3
import asyncio
from colorama import init, Fore
from os import scandir, system, name as osname
from pathlib import Path
from typing import Any
from argparse import ArgumentParser

init(autoreset=True)

colors = {
    "blue": Fore.BLUE,
    "green": Fore.GREEN,
    "black": Fore.BLACK,
    "magenta": Fore.MAGENTA,
    "red": Fore.RED,
    "cyan": Fore.CYAN,
    "reset": Fore.RESET,
    "yellow": Fore.YELLOW
}

parser = ArgumentParser(prog="nerdscanner", description="Scan a dir content with the nerdfonts icons")

parser.add_argument('dir', help='The dir path')
parser.add_argument('-F', '--file-icon', help='The file icon', default='')
parser.add_argument('-D', '--dir-icon', help='The folder icon', default=' ')
parser.add_argument('-NRD', '--no-recursive-dir-icon', help="No recursive folder icon", default="")
parser.add_argument('-i', '--indent-size', help='The indent size', default=2, type=int)
parser.add_argument('-p', '--path', help="Show name as path", action="store_true")

parser.add_argument(
    '-nr', '--no-recursive',
    action="store_true",
    help="Show's a not recursive tree"
)

parser.add_argument(
    "-H", "--hidden",
    action="store_true",
    help="Show the hidden files"
)

parser.add_argument(
    "-I", "--ignore",
    nargs="+",
    default=[], type=str, required=False,
    help="Ignore dirs and files"
)

parser.add_argument(
    "-dc", "--dir-color",
    choices=colors.keys(),
    default='blue', help='The dir icon color'
)

parser.add_argument(
    '-fc', '--file-color',
    choices=colors.keys(),
    default='green', help="The file icon color"
)

args = parser.parse_args()


def icon(color: Any, icon: str) -> str:
    return colors[color] + icon + Fore.RESET


NO_RECURSIVE_FOLDER_ICON = icon(
    args.dir_color,
    args.no_recursive_dir_icon
)

FOLDER_ICON = icon(args.dir_color, args.dir_icon)
FILE_ICON = icon(args.file_color, args.file_icon)

dirpath = Path(args.dir)


def error(msg: str):
    print(Fore.RED + msg)
    exit(1)


if not dirpath.is_dir():
    error(f"Invalid directory {dirpath}, no such file or directory")


def get_archive_name(archive: Any) -> str:
    return archive.name if not args.path else archive.path


def dir_scanner(path: Any, indent: int = 0):
    for archive in scandir(path):
        if not args.hidden:
            if (archive.is_dir() and
                    not archive.name in args.ignore and
                    not archive.name.startswith('.')):
                if not args.no_recursive:
                    print((" " * args.indent_size) * indent + f"{FOLDER_ICON} {get_archive_name(archive)}")
                    dir_scanner(archive, indent + 1)
                else:
                    print((" " * args.indent_size) * indent + f"{NO_RECURSIVE_FOLDER_ICON} {get_archive_name(archive)}")
            elif (not archive.name in args.ignore and
                    not archive.name.startswith('.')):
                print((" " * args.indent_size) * indent + f"{FILE_ICON} {get_archive_name(archive)}")
        else:
            if (archive.is_dir() and
                    not archive.name in args.ignore):
                print((" " * args.indent_size) * indent + f"{FOLDER_ICON} {get_archive_name(archive)}")
                dir_scanner(archive, indent + 1)
            elif not archive.name in args.ignore:
                print((" " * args.indent_size) * indent + f"{FILE_ICON} {get_archive_name(archive)}")


async def async_error(msg: str):
    print(colors['yellow'] + 'Detected an error!')
    await asyncio.sleep(0.7)
    error(msg)


def realmain():
    try:
        dir_scanner(dirpath)
    except KeyboardInterrupt:
        error("Scan process aborted with Ctrl-C")


async def main():
    try:
        realmain()
    except Exception as err:
        await async_error(f"{err.__class__.__name__}: {err}")


if __name__ == '__main__':
    asyncio.run(main())
